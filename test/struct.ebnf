string_type = "string" .
bool_type = "bool" .
float_type = "float" ( "32" | "64" ) .
int_type = [ "u" ] "int" ( "8" | "16" | "32" | "64" ) .
complex_type = "complex" ( "64" | "128" ) .
byte_type = "byte" .
rune_type = "rune" .
simple_type = string_type | bool_type | float_type | int_type |
  complex_type | byte_type | rune_type .
pkg_type = "mail.Address" | "url.URL" | "bytes.Buffer" .
pointer_type = "*" ( simple_type | pkg_type ) .
type = simple_type | pointer_type .

letter = "a" … "z" | "A" … "Z" .
// Make names at least five letters long to avoid:
//  - One-character names, which increase the chance of collisions.
//  - Accidentally generating reserved words, such as "if" or "goto".
name = letter letter letter letter letter { letter } .

tag_json_field = "" | name | "omitempty" .
tag_json = `json:"` tag_json_field { "," tag_json_field } `"` .

pos = "1" … "9" .
digit = "0" | pos .
number = pos { digit } .

tag_valid_def = "def" [ ":" name ] .
tag_valid_min = "min:" number .
tag_valid_max = "max:" number .
tag_valid     = `valid:"` ( tag_valid_max | tag_valid_def |
  tag_valid_min ) `"`.

tag = "`" ( ( tag_json [ "," tag_valid ] ) |
  ( tag_valid [ "," tag_json ] )  ) "`" .

field_name = name .
struct_name = name .

newline = "\n" .
newlines = newline [ newline ] .

comment = "// " name { " " name } newlines .
tab_comment = "\t" comment .

comments = [ comment ] [ comment ].
tab_comments = [ tab_comment ] [ tab_comment ] .

field = "\t" field_name " " type .
field_full = [ tab_comments ] field [ " " tag ] newlines .
struct = "type " struct_name " struct {" newlines
  field_full { field_full } "}" newlines .

// Optional "pre-existing" import of strconv.
strconv_import = [ "import \"strconv\"" newlines ] .
imports = strconv_import .

package = "package test" newlines .
file = comments package imports { struct } .

Start = file .
