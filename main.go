// chris 071415

package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"strings"
	"unicode"


	"go/ast"
	"go/parser"
	"go/token"
	"unicode/utf8"
)

// Program name.  Set by init.
var prog string

func validateString(b *buf, fldname string) {
	b.writef("\tret.%s = data[\"%s\"]\n", fldname, fldname)
}


func validateBool(b *buf, fldname string) {
	b.writef("\tret.%s, err = strconv.ParseBool(data[\"%s\"])\n", fldname, fldname)
	b.writef("\tif err != nil {\n")
	b.writef("\t\treturn nil, err\n")
	b.writef("\t}\n")
}

func validator(b *buf, name string, s *ast.StructType) {
	first, _ := utf8.DecodeRune([]byte(name))
	isPublic := unicode.IsUpper(first)
	var fname string
	if isPublic {
		fname = fmt.Sprintf("Validate%s", name)
	} else {
		fname = fmt.Sprintf("validate%s", strings.Title(name))
	}

	b.writef("func %s(data map[string]string) (*%s, error) {\n", fname, name)
	b.writef("\tret := new(%s)\n", name)

	for _, fld := range s.Fields.List {
		nam := fld.Names[0].Name
		typ, ok := fld.Type.(*ast.Ident)
		if !ok {
			continue
		}
		switch typ.Name {
		case "string":
			validateString(b, nam)
		case "bool":
			validateBool(b, nam)
			b.needsStrconv = true
		}
		b.writef("\t// %s %s\n", nam, typ)
	}

	b.writef("\treturn ret, nil\n")
	b.writef("}\n")
}

func parse(filename string) error {
	file, err := os.Open(filename)
	if err != nil {
		return err
	}
	defer func() {
		err := file.Close()
		if err != nil {
			log.Print(err)
		}
	}()

	// Parse first before outputting anything.
	astfile, err := parser.ParseFile(token.NewFileSet(), filename, file, 0)
	if err != nil {
		return err
	}

	// Buffer validator function code before outputting anything.
	// We do this because we need to know whether we need to augment
	// the import list before outputting any declarations (imports
	// must precede declarations).
	fi, err := file.Stat()
	if err != nil {
		return err
	}
	b := newBuf(fi.Size())

	// Isolate the struct types--the things for which we want to
	// generate validator functions.
	for _, obj := range astfile.Scope.Objects {
		if obj.Kind != ast.Typ {
			continue
		}
		ts, ok := obj.Decl.(*ast.TypeSpec)
		if !ok {
			continue
		}
		s, ok := ts.Type.(*ast.StructType)
		if !ok {
			continue
		}
		if s.Fields == nil {
			return fmt.Errorf("type %s struct has empty field list %v", ts.Name, ts)
		}

		// Ok, we isolated the struct type, now output a
		// validator for it.
		validator(b, ts.Name.Name, s)
	}

	// Output header comment.
	progUpper := strings.ToUpper(prog)
	_, err = fmt.Printf("// *** GENERATED BY %s; DO NOT EDIT ***\n\n", progUpper)
	if err != nil {
		return err
	}

	// Next, output original file.
	// TODO Include strconv import if needed (b.needsStrconv).
	_, err = file.Seek(0, 0)
	if err != nil {
		return err
	}
	_, err = io.Copy(os.Stdout, file)
	if err != nil {
		return err
	}

	// Newline to separate things.
	_, err = fmt.Println()
	if err != nil {
		return err
	}

	io.Copy(os.Stdout, b)

	return nil
}

func usage() {
	log.Printf("usage: %s file.v", path.Base(os.Args[0]))
	os.Exit(2)
}

func init() {
	log.SetFlags(0)
	prog = path.Base(os.Args[0])
}

func main() {
	if len(os.Args) != 2 {
		usage()
	}

	filename := os.Args[1]
	if filename == "" {
		usage()
	}

	err := parse(filename)
	if err != nil {
		log.Fatal(err)
	}
}
